import express from "express";
import multer from "multer";
import fs from "fs/promises";
import supabase from "./supabaseClient.js";
import dotenv from "dotenv";
import cors from "cors";
import path from "path";
// Import the 'form-data' library for Node.js
import FormData from "form-data";

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const upload = multer({ dest: "uploads/" });

// ----------------------
// VOICE UPLOAD
// ----------------------
async function uploadVoice(file) {
  console.log("🎤 Processing voice upload...");
  const filePath = `voices/${Date.now()}_${file.originalname}`;
  
  const bucketName = process.env.REACT_APP_SUPABASE_BUCKET;

  const { data, error } = await supabase.storage
    .from(bucketName)
    .upload(filePath, await fs.readFile(file.path), {
      cacheControl: "3600",
      upsert: false,
      contentType: file.mimetype,
    });

  await fs.unlink(file.path);

  if (error) {
    console.error("❌ Voice upload error:", error.message);
    throw new Error(error.message);
  }

  console.log(`✅ Voice uploaded successfully to bucket '${bucketName}':`, data.path);
  return data.path;
}

// ----------------------
// SCRIPT UPLOAD
// ----------------------
async function uploadScript(file) {
  console.log("📜 Processing script upload...");
  const filePath = `scripts/${Date.now()}_${file.originalname}`;
  
  const bucketName = process.env.REACT_APP_SUPABASE_BUCKET;

  const { data, error } = await supabase.storage
    .from(bucketName)
    .upload(filePath, await fs.readFile(file.path), {
      cacheControl: "3600",
      upsert: false,
      contentType: file.mimetype,
    });

  await fs.unlink(file.path);

  if (error) {
    console.error("❌ Script upload error:", error.message);
    throw new Error(error.message);
  }
  
  console.log(`✅ Script uploaded successfully to bucket '${bucketName}':`, data.path);
  return data.path;
}

// ----------------------
// CREATE ELEVENLABS VOICE ID
// ----------------------
app.post("/create-elevenlabs-voice", express.json(), async (req, res) => {
  try {
    console.log("🗣️ Request received: /create-elevenlabs-voice");
    const { voicePath } = req.body;

    if (!voicePath) {
      return res.status(400).json({ error: "Voice path is required." });
    }

    const elevenLabsApiKey = process.env.ELEVENLABS_API_KEY; // Using standard name
    const bucketName = process.env.REACT_APP_SUPABASE_BUCKET;
    const voiceName = path.basename(voicePath).split('_').slice(1).join('_');

    if (!elevenLabsApiKey) {
      return res.status(500).json({ error: "ElevenLabs API Key is missing." });
    }

    // Download the uploaded audio file from Supabase as an ArrayBuffer
    const { data: voiceData, error: voiceDownloadError } = await supabase.storage
      .from(bucketName)
      .download(voicePath);

    if (voiceDownloadError) {
      console.error("❌ Failed to download voice for cloning:", voiceDownloadError.message);
      return res.status(500).json({ error: "Failed to download voice file." });
    }
    
    // Create a form-data instance for Node.js
    const formData = new FormData();
    formData.append("name", voiceName);
    formData.append("files", voiceData, { filename: path.basename(voicePath), contentType: 'audio/mpeg' }); // Use the Blob directly
    
    // Call the ElevenLabs "Add Voice" API using fetch
    const elevenLabsResponse = await fetch(
      "https://api.elevenlabs.io/v1/voices/add",
      {
        method: "POST",
        headers: {
          "xi-api-key": elevenLabsApiKey,
        },
        body: formData, // fetch will correctly set the Content-Type header with the boundary
      }
    );

    const elevenLabsResponseJson = await elevenLabsResponse.json();
    
    if (!elevenLabsResponse.ok) {
        console.error("❌ ElevenLabs API error:", elevenLabsResponseJson);
        throw new Error(elevenLabsResponseJson.detail || "ElevenLabs API call failed.");
    }
    
    const elevenLabsVoiceId = elevenLabsResponseJson.voice_id;
    console.log(`✅ New ElevenLabs Voice ID created: ${elevenLabsVoiceId}`);
    res.json({ message: "Voice cloned successfully", voiceId: elevenLabsVoiceId });

  } catch (err) {
    console.error("❌ Error in /create-elevenlabs-voice:", err.message);
    res.status(500).json({ error: "Voice cloning failed: " + err.message });
  }
});

// ----------------------
// VOICE REFINEMENT (UPDATED ROUTE)
// ----------------------
app.post("/refinevoice", express.json(), async (req, res) => {
  try {
    console.log("🪄 Request received: /refinevoice");
    const { elevenLabsVoiceId, scriptPath, scriptContent } = req.body;

    if (!elevenLabsVoiceId || (!scriptPath && !scriptContent)) {
      return res.status(400).json({ error: "Voice ID and either a script path or content are required." });
    }

    const elevenLabsApiKey = process.env.ELEVENLABS_API_KEY; // Using standard name
    const bucketName = process.env.REACT_APP_SUPABASE_BUCKET;

    if (!elevenLabsApiKey) {
      return res.status(500).json({ error: "ElevenLabs API Key is missing." });
    }

    let finalScriptContent;
    if (scriptContent) {
        finalScriptContent = scriptContent;
        console.log("✅ Using text input for script.");
    } else if (scriptPath) {
        // Download the uploaded script file content from Supabase
        const { data: scriptData, error: scriptError } = await supabase.storage
            .from(bucketName)
            .download(scriptPath);

        if (scriptError) {
            console.error("❌ Failed to download script:", scriptError.message);
            return res.status(500).json({ error: "Failed to download script file." });
        }
        finalScriptContent = await new Blob([scriptData]).text();
        console.log("✅ Script content retrieved from file.");
    }

    // ---- ELEVENLABS API CALL using fetch ----
    const synthesisResponse = await fetch(
      `https://api.elevenlabs.io/v1/text-to-speech/${elevenLabsVoiceId}`,
      {
        method: "POST",
        headers: {
          "xi-api-key": elevenLabsApiKey,
          "Content-Type": "application/json",
          "Accept": "audio/mpeg",
        },
        body: JSON.stringify({
          text: finalScriptContent,
          model_id: "eleven_multilingual_v2", 
        }),
      }
    );

    const refinedAudioBuffer = await synthesisResponse.arrayBuffer();
    console.log("✅ Voice synthesized by ElevenLabs.");

    // Create a unique filename for the refined voice
    const refinedFileName = `refinedvoice_${Date.now()}.mp3`;
    const refinedFilePath = `refinedvoices/${refinedFileName}`;

    // Upload the synthesized audio to the new 'refinedvoices' folder
    const { data: refinedData, error: refinedError } = await supabase.storage
      .from(bucketName)
      .upload(refinedFilePath, Buffer.from(refinedAudioBuffer), {
        contentType: 'audio/mpeg',
        upsert: false,
      });

    if (refinedError) {
      console.log("❌ Refined voice upload failed:", refinedError.message);
      return res.status(500).json({ error: "Failed to upload refined voice." });
    }

    console.log(`✅ Refined voice uploaded successfully to bucket '${bucketName}':`, refinedData.path);
    res.json({ message: "Voice refined and uploaded successfully", refinedPath: refinedData.path });

  } catch (err) {
    console.log("❌ Error in /refinevoice:", err.message);
    res.status(500).json({ error: err.message });
  }
});

// ----------------------
// GET PUBLIC URL
// ----------------------
app.post("/get-public-url", express.json(), async (req, res) => {
  try {
    const { path } = req.body;
    const bucketName = process.env.REACT_APP_SUPABASE_BUCKET;

    if (!path) {
      return res.status(400).json({ error: "File path is required." });
    }

    const { data } = supabase.storage.from(bucketName).getPublicUrl(path);
    
    if (data && data.publicUrl) {
      return res.json({ publicUrl: data.publicUrl });
    } else {
      return res.status(500).json({ error: "Failed to get public URL." });
    }
  } catch (err) {
    console.error("❌ Error in /get-public-url:", err.message);
    return res.status(500).json({ error: "Failed to get public URL." });
  }
});

// ----------------------
// ROUTES
// ----------------------
app.post("/voiceupload", upload.single("voice"), async (req, res) => {
  try {
   console.log("✅ Request received: /voiceupload");
   if (!req.file) return res.status(400).json({ error: "Voice file required" });

   const path = await uploadVoice(req.file);
   res.json({ message: "Voice uploaded successfully", path });
  } catch (err) {
   console.error("❌ Error in /voiceupload:", err.message);
   res.status(500).json({ error: err.message });
  }
});

app.post("/scriptupload", upload.single("script"), async (req, res) => {
  try {
   console.log("✅ Request received: /scriptupload");
   if (!req.file) return res.status(400).json({ error: "Script file required" });

   const path = await uploadScript(req.file);
   res.json({ message: "Script uploaded successfully", path });
  } catch (err) {
   console.error("❌ Error in /scriptupload:", err.message);
   res.status(500).json({ error: err.message });
  }
});

// ----------------------
// START SERVER
// ----------------------
app.listen(5000, () => {
  console.log("🚀 Server running at http://localhost:5000");
});
